{% extends 'base.html.twig' %}

{% block title %}Crypto - cours{% endblock %}
{% block body %}
<script src={{ asset('js/chart.js') }}></script>
<style>
    /* Spinner de chargement */
    .loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        display: none; /* Cacher le loader par défaut */
        margin: 20px auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
<main class="flex flex-col items-center text-center mt-24 px-4">
    <h1 class="text-2xl font-bold text-center mb-6 text-white dark:text-gray-900 animate__animated animate__fadeInUp">
        Cours des Cryptos
    </h1>
    
    <div class="overflow-x-auto w-full max-w-5xl max-h-[60vh] rounded-lg shadow-lg animate__animated animate__fadeInUp animate__delay-0.5s">
        <table class="w-full border-collapse border border-gray-300 dark:border-gray-700 shadow-lg rounded-lg overflow-hidden text-sm sm:text-base">
            <thead class="bg-gray-900 text-white dark:bg-gray-700">
                <tr>
                    <th class="p-3 sm:p-4 border border-gray-500">ID Crypto</th>
                    <th class="p-3 sm:p-4 border border-gray-500">Nom Crypto</th>
                    <th class="p-3 sm:p-4 border border-gray-500">Valeur (USD)</th>
                </tr>
            </thead>
            <tbody id="tbody" class="bg-white text-black dark:bg-gray-200">
            </tbody>
        </table>
        <div id="cryptoLoader" class="loader"></div>
    </div>

{% if error is defined %}
    <script>
        Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "{{ error|raw }}"
        });
    </script>
{% endif %}
</main>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const cryptoLoader = document.getElementById("cryptoLoader");
        const tbody = document.getElementById("tbody");
        // Affichage du loader pendant la récupération des cryptos
        function fetchCryptoData() {
            fetch('/cryptos')
                .then(response => response.json())
                .then(data => {
                    cryptoLoader.style.display = 'none';  // Cacher le loader une fois les cryptos récupérés
                    tbody.innerHTML = "";
                    if (!data.cryptos || data.cryptos.length === 0) {
                        const option  = document.createElement('option');
                        option.textContent = 'Pas de cryptos';
                        option.disabled = true;
                        cryptoSelect.appendChild(option);
                        return;
                    }

                    data.cryptos.forEach((crypto) => {
                        const tr = document.createElement("tr");
                        // Alternance de couleur des lignes
                        tr.classList.add('bg-gray-800', 'hover:bg-gray-700', 'text-white', 'dark:bg-gray-300','dark:hover:bg-gray-400', 'dark:text-black');
                        
                        const td1 = document.createElement("td");
                        td1.classList.add('p-3', 'sm:p-4', 'border');
                        td1.textContent = crypto.idCrypto;
                        const td2 = document.createElement("td");
                        td2.classList.add('p-3', 'sm:p-4', 'border');
                        td2.textContent = crypto.intitule;
                        const td3 = document.createElement("td");
                        td3.classList.add('p-3', 'sm:p-4', 'border', 'animate__animated','animate__flipInX');
                        td3.textContent = crypto.currentValeur;
                        
                        tr.appendChild(td1);
                        tr.appendChild(td2);
                        tr.appendChild(td3);
                        tbody.appendChild(tr);
                    });

                    tbody.appendChild(table);
                })
                .catch(error => {
                    console.error("Erreur lors de la récupération des cryptos :", error);
                    cryptoLoader.style.display = 'none';  // Cacher le loader en cas d'erreur
                });
        }
        cryptoLoader.style.display = 'block'; 
        fetchCryptoData();
        setInterval(() => fetchCryptoData(), 10000);
    });
</script>
{% endblock %}